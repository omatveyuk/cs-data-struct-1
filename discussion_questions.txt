Runtime:

1. Taking each cracker from the box and checking if it is an elefant. The best case is if the elefant is the first cracker is an elefant. The worst case is the last(or not in the box) O(n)
2. O(1)< O(log n)< O(n)< < O(n log n)< O(n^2)< O(2^n)

Stacks and Queues:

1.1. Stack
1.2. Queue
1.3. If we rewrite expression (2+7)*4-3/2 in postfix notation:
        274*+32/- then we will use Stack

2.1. Queue: 
    The line is at gasoline station. A car which comes first will leave the first.
    The last car will wait while all cars will leave the station.

    Line to a shop on Black Friday. First customer in the line will come in first when 
    the shop opens.

    Stack:
    Cars on a ferry boat. Car which comes to the the ferry boat will leave it the last and the last car will leave the first.
    Load baggage to airplane. Bag which was put in container will be taken the last.

Linked List

1. Nodes are boxes with text: "Apple", "Barry", "Cherry". Data is the text inside boxes("Apple", "Barry", "Cherry"). Head is the arrow which points on the first node "Apple". Tail is arrow from the last node "Cherry"

2. In single-linked list each node know only about the next node. In double-linked list each node knows about the next and the previous nodes. So if we want to know about previous node of current node we don't need to traverse all linked-list again from begining as in single-list.

3. In linked list we append new node to the end of the list if we don't know pointer(tail) on the last node we have to go through all list to append the node (O(n)). If we use tail we can immediately to add node to the end of the list just to change the tail pointer to the new node and connect last node with the new (O(1)). 

Trees

1. Food, Italian, Indian, Mexican, lasagna, pizza, tikka massala, saag, BURRITOS
2. Food, Mexican, enchiladas, tacos, burritos, Indian, saag, tikka masala, Itallian, pizza, Sicilian, 
   New York-style, CHICAGO-STYLE
3. Each parent can have only 0, 1 or 2 children. The tree is ordered: the right child is greater than parent and left child is less than parent.






